pipeline {
    agent{
        docker{
            image 'maven:3.6.1-jdk-8-slim'
            args '-v $HOME/.m2:/root/.m2:z -u root'
            reuseNode true
        }
    }
   
    
    stages{
        stage('build'){
            
            steps{
                echo "compiling worker app"
                dir('worker'){
                    sh 'mvn compile'
                }
                }
            }
        
         stage('test'){
     
            
            steps{
               echo "running unit tests" 
               dir('worker'){
                    sh 'mvn clean test'
                }
            }
        }
         stage('package'){
      
        
            steps{
                echo "packaging worker app"
                 dir('worker'){
                    sh 'mvn package -DskipTests'
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                 }
            }
         }
        
           
           stage('docker package'){
      
        
            steps{
                echo "docker package"
                 dir('worker'){
                    script{
                        docker.WithRegistry('https://index.docker.io/v1','dockerlogin') {
                        def workerImage = docker.build("lexarflash8g/worker:v${env.BUILD_ID}", "./worker")
                        workerImage.push()
                        workerImage.push("${env.BRANCH_NAME}")
                    }
                    }
                }
            }
        }
    
    
 post{    
     always{        
         echo 'Building multibranch pipeline for worker is completed..'    
         }    
         failure{      
             slackSend (channel: "instavote-cd", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")    
             } 
                success{      
                    slackSend (channel: "instavote-cd", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)") 
                       }  
                    }
                }
}
            
                
